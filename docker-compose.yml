version: "3.8"
services:
  web:
    # volume mount conveys ownership uid (1000) on host to container setting user: node (uid: 1000) as owner and group. Running docker-compose session as uid:1000 is the most simple solution.
    user: 1000:1000
    depends_on:
      - api
    build: ./frontend # spec path to Dockerfile
    ports:
      - 3000:3000 
      # <host>:<container>
    volumes:
      - ./frontend:/app # <host>:<container>

  api:
    depends_on:
      - db
    build: ./backend
    # *note* this maps to the same resources as DB_URL does
    ports:
      - 3001:3001
    environment:
     # <var>=<image name>://<connection string [service name/db-name]>
      DB_URL: mongodb://db/vidly
    volumes:
      - ./backend:/app # <host (relative path)>:<container>
    command: ["sh", "./docker-entrypoint.sh"]

  db:
    # pull & build a mongo image from docker hub
    image: mongo:4.0-xenial
    ports:
      - 27017:27017
    # map volume to directory in container
    volumes:
      - vidly:/data/db
volumes:
  # map volume vidly to dir. inside the container
  vidly:
  # *note* this syntax looks strange but ALL it seems to be doing is 'executing' the volume vidly after it has been defined...or something    